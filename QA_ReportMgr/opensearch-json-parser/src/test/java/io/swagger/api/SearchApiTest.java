/**
 * FedEO Earth Observation Catalog
 * FedEO provides interoperable access, following ISO/OGC interface guidelines, to Earth Observation metadata. You can try all HTTP operations described in this OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0
 * Contact: yves.coene@spacebel.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.api;


import be.spacebel.opensearch.api.SearchApi;
import be.spacebel.opensearch.model.FeatureCollection;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import org.junit.Test;
import org.junit.Before;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import java.io.File;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Scanner;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import static org.junit.Assert.assertNotNull;
import org.slf4j.LoggerFactory;

/**
 * FedEO Earth Observation Catalog
 *
 * <p>
 * FedEO provides interoperable access, following ISO/OGC interface guidelines,
 * to Earth Observation metadata. You can try all HTTP operations described in
 * this OpenAPI 3.0 specification.
 *
 * API tests for SearchApi
 */
public class SearchApiTest {

  private static final transient org.slf4j.Logger log = LoggerFactory.getLogger(
          SearchApiTest.class);

  private SearchApi api;

  @Before
  public void setup() {
    JacksonJsonProvider provider = new JacksonJsonProvider();
    List providers = new ArrayList();
    providers.add(provider);

    api = JAXRSClientFactory.create("http://qcmms-cat.spacebel.be",
            SearchApi.class, providers);
    org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

    ClientConfiguration config = WebClient.getConfig(client);

    config.getInInterceptors().add(new LoggingInInterceptor());
    config.getOutInterceptors().add(new LoggingOutInterceptor());
  }

  /**
   * Dataset search (rel&#x3D;\&quot;results\&quot;)
   *
   * The endpoint returns information about the *FedEO* dataset matching
   * specific filtering criteria such as organisation, platform, instrument,
   * title, keyword and lists the datasets .
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void eoCatalogSeriesParentIdentifierDatasetsGetTest() {
    log.debug("Start");
    String parentIdentifier = "EOP:SPB:QA_REPORT_TEST_1:S2";
    String httpAccept = "application/geo+json";
    Integer maximumRecords = null;
    Integer startRecord = null;
    Integer startPage = null;
    String query = null;
    String bbox = null;
    Double lat = null;
    Double lon = null;
    String name = null;
    Double radius = null;
    String geometry = null;
    String uid = null;
    String platform = null;
    String platformSerialIdentifier = null;
    String instrument = null;
    String sensorType = null;
    Double resolution = null;
    String productionStatus = null;
    String acquisitionType = null;
    Integer orbitNumber = null;
    String orbitDirection = null;
    String track = null;
    String frame = null;
    String swathIdentifier = null;
    Double lowestLocation = null;
    Double highestLocation = null;
    String productVersion = null;
    String productQualityStatus = null;
    String productQualityDegradationTag = null;
    String processorName = null;
    String processingCenter = null;
    String sensorMode = null;
    String archivingCenter = null;
    String processingMode = null;
    String acquisitionStation = null;
    String acquisitionSubType = null;
    Double startTimeFromAscendingNode = null;
    Double completionTimeFromAscendingNode = null;
    Double illuminationAzimuthAngle = null;
    Double illuminationZenithAngle = null;
    Double illuminationElevationAngle = null;
    String productType = null;
    String processingLevel = null;
/**
    FeatureCollection response = api.eoCatalogSeriesParentIdentifierDatasetsGet(
            parentIdentifier, httpAccept, maximumRecords, startRecord, startPage,
            query, startDate, endDate, bbox, lat, lon, name, radius, geometry,
            uid, platform, platformSerialIdentifier, instrument, sensorType,
            resolution, creationDate, modificationDate, productionStatus,
            acquisitionType, orbitNumber, orbitDirection, track, frame,
            swathIdentifier, lowestLocation, highestLocation, productVersion,
            productQualityStatus, productQualityDegradationTag, processorName,
            processingCenter, processingDate, sensorMode, archivingCenter,
            processingMode, acquisitionStation, acquisitionSubType,
            startTimeFromAscendingNode, completionTimeFromAscendingNode,
            illuminationAzimuthAngle, illuminationZenithAngle,
            illuminationElevationAngle, productType, processingLevel);
            * */
      try {
    String out = new String(Files.readAllBytes(Paths.get("D:/api.txt")));
                 out = new Scanner(new URL("http://qcmms-cat.spacebel.be/eo-catalog/series/EOP:SPB:QA_REPORT_TEST_1:S2/datasets?httpAccept=application/geo%2Bjson&startDate=2017-01-01T00:00:00Z&endDate=2019-01-31T00:00:00Z").openStream(), "UTF-8").useDelimiter("\\A").next();
                              out = new Scanner(new URL("http://qcmms-cat.spacebel.be/eo-catalog/series/EOP:SPB:QA_REPORT_TEST_1:LP_TUC1/datasets").openStream(), "UTF-8").useDelimiter("\\A").next();
    
    System.out.println(out);
      //JsonElement parser = new JsonParser().parse(out);
      //parser.getAsJsonObject();
     
        StringReader sr = new StringReader(out);

ObjectMapper mapper = new ObjectMapper();

   mapper.registerModule(new JavaTimeModule()); // new module, NOT JSR310Module
   
    FeatureCollection fc = mapper.readValue(sr,FeatureCollection.class);
System.out.println("test"+fc.getFeatures().get(0).getProperties().any().get("categories"));
System.out.println("test"+fc.getFeatures().get(0).getProperties().getLinks().getVia().get(
                0).getHref());
        
      }
      catch(Exception e) {
        e.printStackTrace();
      }
    log.debug("Request Sent");


    // TODO: test validations

  }
  /**
   * @throws ApiException if the Api call fails
   */
  //@Test
  /**
   * public void searchTest() { String parentIdentifier = null; String datasetId
   * = null; String httpAccept = null; //FeatureCollection response =
   * api.search(parentIdentifier, datasetId, httpAccept);
   * //assertNotNull(response); // TODO: test validations
   *
   *
   * }
   *
   */
}
